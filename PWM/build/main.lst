ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	htim3
  20              		.section	.bss.htim3,"aw",%nobits
  21              		.align	2
  24              	htim3:
  25 0000 00000000 		.space	72
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	htim4
  27              		.section	.bss.htim4,"aw",%nobits
  28              		.align	2
  31              	htim4:
  32 0000 00000000 		.space	72
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	time_count
  34              		.section	.bss.time_count,"aw",%nobits
  35              		.align	2
  38              	time_count:
  39 0000 00000000 		.space	4
  40              		.global	duty_cycle
  41              		.section	.bss.duty_cycle,"aw",%nobits
  42              		.align	2
  45              	duty_cycle:
  46 0000 00000000 		.space	4
  47              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  48              		.align	1
  49              		.global	HAL_TIM_PeriodElapsedCallback
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	HAL_TIM_PeriodElapsedCallback:
  55              	.LFB134:
  56              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 2


   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ****************************-**************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "button.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  45:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE BEGIN PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PV */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/main.c **** void SystemClock_Config(void);
  53:Core/Src/main.c **** static void MX_GPIO_Init(void);
  54:Core/Src/main.c **** static void MX_TIM4_Init(void);
  55:Core/Src/main.c **** static void MX_TIM3_Init(void);
  56:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END PFP */
  59:Core/Src/main.c **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 3


  60:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  61:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** uint32_t time_count = 0;
  64:Core/Src/main.c **** float duty_cycle = 0.0; // Initial duty cycle of 50%
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  67:Core/Src/main.c **** {
  57              		.loc 1 67 1
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 8
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 80B5     		push	{r7, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 82B0     		sub	sp, sp, #8
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 16
  69 0004 00AF     		add	r7, sp, #0
  70              	.LCFI2:
  71              		.cfi_def_cfa_register 7
  72 0006 7860     		str	r0, [r7, #4]
  68:Core/Src/main.c ****   if (htim->Instance == TIM3) {
  73              		.loc 1 68 11
  74 0008 7B68     		ldr	r3, [r7, #4]
  75 000a 1B68     		ldr	r3, [r3]
  76              		.loc 1 68 6
  77 000c 1F4A     		ldr	r2, .L6
  78 000e 9342     		cmp	r3, r2
  79 0010 38D1     		bne	.L5
  69:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle the LED on PC13
  80              		.loc 1 69 5
  81 0012 4FF40051 		mov	r1, #8192
  82 0016 1E48     		ldr	r0, .L6+4
  83 0018 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  70:Core/Src/main.c ****     time_count ++;
  84              		.loc 1 70 16
  85 001c 1D4B     		ldr	r3, .L6+8
  86 001e 1B68     		ldr	r3, [r3]
  87 0020 0133     		adds	r3, r3, #1
  88 0022 1C4A     		ldr	r2, .L6+8
  89 0024 1360     		str	r3, [r2]
  71:Core/Src/main.c ****     if (time_count <= 4000){
  90              		.loc 1 71 20
  91 0026 1B4B     		ldr	r3, .L6+8
  92 0028 1B68     		ldr	r3, [r3]
  93              		.loc 1 71 8
  94 002a B3F57A6F 		cmp	r3, #4000
  95 002e 0ED8     		bhi	.L3
  72:Core/Src/main.c ****       htim4.Instance->CCR1 = (htim4.Instance->ARR)*(time_count)/4000;
  96              		.loc 1 72 36
  97 0030 194B     		ldr	r3, .L6+12
  98 0032 1B68     		ldr	r3, [r3]
  99              		.loc 1 72 45
 100 0034 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 4


 101              		.loc 1 72 51
 102 0036 174A     		ldr	r2, .L6+8
 103 0038 1268     		ldr	r2, [r2]
 104 003a 03FB02F2 		mul	r2, r3, r2
 105              		.loc 1 72 12
 106 003e 164B     		ldr	r3, .L6+12
 107 0040 1B68     		ldr	r3, [r3]
 108              		.loc 1 72 64
 109 0042 1649     		ldr	r1, .L6+16
 110 0044 A1FB0212 		umull	r1, r2, r1, r2
 111 0048 120A     		lsrs	r2, r2, #8
 112              		.loc 1 72 28
 113 004a 5A63     		str	r2, [r3, #52]
  73:Core/Src/main.c ****     }
  74:Core/Src/main.c ****     else if (time_count <= 6000){
  75:Core/Src/main.c ****       htim4.Instance->CCR1 = (htim4.Instance->ARR)*(2000-(time_count-4000))/2000;
  76:Core/Src/main.c ****     }
  77:Core/Src/main.c ****     else {
  78:Core/Src/main.c ****       time_count = 0;
  79:Core/Src/main.c ****     }
  80:Core/Src/main.c ****     // This callback is called when TIM3 overflows
  81:Core/Src/main.c ****     // You can add code here to handle the overflow event
  82:Core/Src/main.c ****   }
  83:Core/Src/main.c **** }
 114              		.loc 1 83 1
 115 004c 1AE0     		b	.L5
 116              	.L3:
  74:Core/Src/main.c ****       htim4.Instance->CCR1 = (htim4.Instance->ARR)*(2000-(time_count-4000))/2000;
 117              		.loc 1 74 25
 118 004e 114B     		ldr	r3, .L6+8
 119 0050 1B68     		ldr	r3, [r3]
  74:Core/Src/main.c ****       htim4.Instance->CCR1 = (htim4.Instance->ARR)*(2000-(time_count-4000))/2000;
 120              		.loc 1 74 13
 121 0052 41F27072 		movw	r2, #6000
 122 0056 9342     		cmp	r3, r2
 123 0058 11D8     		bhi	.L4
  75:Core/Src/main.c ****     }
 124              		.loc 1 75 36
 125 005a 0F4B     		ldr	r3, .L6+12
 126 005c 1B68     		ldr	r3, [r3]
  75:Core/Src/main.c ****     }
 127              		.loc 1 75 45
 128 005e DA6A     		ldr	r2, [r3, #44]
  75:Core/Src/main.c ****     }
 129              		.loc 1 75 57
 130 0060 0C4B     		ldr	r3, .L6+8
 131 0062 1B68     		ldr	r3, [r3]
 132 0064 C3F5BB53 		rsb	r3, r3, #5984
 133 0068 1033     		adds	r3, r3, #16
  75:Core/Src/main.c ****     }
 134              		.loc 1 75 51
 135 006a 03FB02F2 		mul	r2, r3, r2
  75:Core/Src/main.c ****     }
 136              		.loc 1 75 12
 137 006e 0A4B     		ldr	r3, .L6+12
 138 0070 1B68     		ldr	r3, [r3]
  75:Core/Src/main.c ****     }
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 5


 139              		.loc 1 75 76
 140 0072 0A49     		ldr	r1, .L6+16
 141 0074 A1FB0212 		umull	r1, r2, r1, r2
 142 0078 D209     		lsrs	r2, r2, #7
  75:Core/Src/main.c ****     }
 143              		.loc 1 75 28
 144 007a 5A63     		str	r2, [r3, #52]
 145              		.loc 1 83 1
 146 007c 02E0     		b	.L5
 147              	.L4:
  78:Core/Src/main.c ****     }
 148              		.loc 1 78 18
 149 007e 054B     		ldr	r3, .L6+8
 150 0080 0022     		movs	r2, #0
 151 0082 1A60     		str	r2, [r3]
 152              	.L5:
 153              		.loc 1 83 1
 154 0084 00BF     		nop
 155 0086 0837     		adds	r7, r7, #8
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158 0088 BD46     		mov	sp, r7
 159              	.LCFI4:
 160              		.cfi_def_cfa_register 13
 161              		@ sp needed
 162 008a 80BD     		pop	{r7, pc}
 163              	.L7:
 164              		.align	2
 165              	.L6:
 166 008c 00040040 		.word	1073742848
 167 0090 00080240 		.word	1073874944
 168 0094 00000000 		.word	time_count
 169 0098 00000000 		.word	htim4
 170 009c D34D6210 		.word	274877907
 171              		.cfi_endproc
 172              	.LFE134:
 174              		.global	__aeabi_ui2d
 175              		.global	__aeabi_f2d
 176              		.global	__aeabi_ddiv
 177              		.global	__aeabi_dmul
 178              		.global	__aeabi_d2uiz
 179              		.section	.text.main,"ax",%progbits
 180              		.align	1
 181              		.global	main
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 186              	main:
 187              	.LFB135:
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* USER CODE END 0 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /**
  88:Core/Src/main.c ****   * @brief  The application entry point.
  89:Core/Src/main.c ****   * @retval int
  90:Core/Src/main.c ****   */
  91:Core/Src/main.c **** int main(void)
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 6


  92:Core/Src/main.c **** {
 188              		.loc 1 92 1
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 B0B5     		push	{r4, r5, r7, lr}
 193              	.LCFI5:
 194              		.cfi_def_cfa_offset 16
 195              		.cfi_offset 4, -16
 196              		.cfi_offset 5, -12
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 00AF     		add	r7, sp, #0
 200              	.LCFI6:
 201              		.cfi_def_cfa_register 7
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END 1 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 101:Core/Src/main.c ****   HAL_Init();
 202              		.loc 1 101 3
 203 0004 FFF7FEFF 		bl	HAL_Init
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE END Init */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* Configure the system clock */
 108:Core/Src/main.c ****   SystemClock_Config();
 204              		.loc 1 108 3
 205 0008 FFF7FEFF 		bl	SystemClock_Config
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END SysInit */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Initialize all configured peripherals */
 115:Core/Src/main.c ****   MX_GPIO_Init();
 206              		.loc 1 115 3
 207 000c FFF7FEFF 		bl	MX_GPIO_Init
 116:Core/Src/main.c ****   MX_TIM4_Init();
 208              		.loc 1 116 3
 209 0010 FFF7FEFF 		bl	MX_TIM4_Init
 117:Core/Src/main.c ****   MX_TIM3_Init();
 210              		.loc 1 117 3
 211 0014 FFF7FEFF 		bl	MX_TIM3_Init
 118:Core/Src/main.c ****   /* USER CODE BEGIN 2 */ 
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 212              		.loc 1 120 3
 213 0018 0021     		movs	r1, #0
 214 001a 3548     		ldr	r0, .L16
 215 001c FFF7FEFF 		bl	HAL_TIM_PWM_Start
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 7


 121:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 216              		.loc 1 121 3
 217 0020 0421     		movs	r1, #4
 218 0022 3348     		ldr	r0, .L16
 219 0024 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 122:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 220              		.loc 1 122 3
 221 0028 3248     		ldr	r0, .L16+4
 222 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 223              	.L13:
 123:Core/Src/main.c ****   /* USER CODE END 2 */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Infinite loop */
 126:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 127:Core/Src/main.c ****   while (1)
 128:Core/Src/main.c ****   {
 129:Core/Src/main.c ****     /* USER CODE END WHILE */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     HAL_Delay(50);
 224              		.loc 1 133 5
 225 002e 3220     		movs	r0, #50
 226 0030 FFF7FEFF 		bl	HAL_Delay
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     if (button_release(LOW_BUTTON_GPIO_Port, LOW_BUTTON_Pin, 0))
 227              		.loc 1 135 9
 228 0034 0022     		movs	r2, #0
 229 0036 4FF48041 		mov	r1, #16384
 230 003a 2F48     		ldr	r0, .L16+8
 231 003c FFF7FEFF 		bl	button_release
 232 0040 0346     		mov	r3, r0
 233              		.loc 1 135 8
 234 0042 002B     		cmp	r3, #0
 235 0044 11D0     		beq	.L9
 136:Core/Src/main.c ****     {
 137:Core/Src/main.c ****       if (duty_cycle > 0.0) {
 236              		.loc 1 137 22
 237 0046 2D4B     		ldr	r3, .L16+12
 238 0048 D3ED007A 		vldr.32	s15, [r3]
 239              		.loc 1 137 10
 240 004c F5EEC07A 		vcmpe.f32	s15, #0
 241 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 242 0054 09DD     		ble	.L9
 138:Core/Src/main.c ****         duty_cycle -= 12.5;
 243              		.loc 1 138 20
 244 0056 294B     		ldr	r3, .L16+12
 245 0058 D3ED007A 		vldr.32	s15, [r3]
 246 005c B2EE097A 		vmov.f32	s14, #1.25e+1
 247 0060 77EEC77A 		vsub.f32	s15, s15, s14
 248 0064 254B     		ldr	r3, .L16+12
 249 0066 C3ED007A 		vstr.32	s15, [r3]
 250              	.L9:
 139:Core/Src/main.c ****       }
 140:Core/Src/main.c ****     }
 141:Core/Src/main.c ****     if (button_release(HIGH_BUTTON_GPIO_Port, HIGH_BUTTON_Pin, 0))
 251              		.loc 1 141 9
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 8


 252 006a 0022     		movs	r2, #0
 253 006c 4FF40041 		mov	r1, #32768
 254 0070 2148     		ldr	r0, .L16+8
 255 0072 FFF7FEFF 		bl	button_release
 256 0076 0346     		mov	r3, r0
 257              		.loc 1 141 8
 258 0078 002B     		cmp	r3, #0
 259 007a 13D0     		beq	.L11
 142:Core/Src/main.c ****     {
 143:Core/Src/main.c ****       if (duty_cycle < 100.0) {
 260              		.loc 1 143 22
 261 007c 1F4B     		ldr	r3, .L16+12
 262 007e D3ED007A 		vldr.32	s15, [r3]
 263              		.loc 1 143 10
 264 0082 9FED1F7A 		vldr.32	s14, .L16+16
 265 0086 F4EEC77A 		vcmpe.f32	s15, s14
 266 008a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 267 008e 09D5     		bpl	.L11
 144:Core/Src/main.c ****         duty_cycle += 12.5;
 268              		.loc 1 144 20
 269 0090 1A4B     		ldr	r3, .L16+12
 270 0092 D3ED007A 		vldr.32	s15, [r3]
 271 0096 B2EE097A 		vmov.f32	s14, #1.25e+1
 272 009a 77EE877A 		vadd.f32	s15, s15, s14
 273 009e 174B     		ldr	r3, .L16+12
 274 00a0 C3ED007A 		vstr.32	s15, [r3]
 275              	.L11:
 145:Core/Src/main.c ****       }
 146:Core/Src/main.c ****     }
 147:Core/Src/main.c ****     htim4.Instance->CCR2 = (htim4.Instance->ARR)*(duty_cycle/100.0);
 276              		.loc 1 147 34
 277 00a4 124B     		ldr	r3, .L16
 278 00a6 1B68     		ldr	r3, [r3]
 279              		.loc 1 147 43
 280 00a8 DB6A     		ldr	r3, [r3, #44]
 281              		.loc 1 147 49
 282 00aa 1846     		mov	r0, r3
 283 00ac FFF7FEFF 		bl	__aeabi_ui2d
 284 00b0 0446     		mov	r4, r0
 285 00b2 0D46     		mov	r5, r1
 286              		.loc 1 147 61
 287 00b4 114B     		ldr	r3, .L16+12
 288 00b6 1B68     		ldr	r3, [r3]	@ float
 289 00b8 1846     		mov	r0, r3	@ float
 290 00ba FFF7FEFF 		bl	__aeabi_f2d
 291 00be 4FF00002 		mov	r2, #0
 292 00c2 104B     		ldr	r3, .L16+20
 293 00c4 FFF7FEFF 		bl	__aeabi_ddiv
 294 00c8 0246     		mov	r2, r0
 295 00ca 0B46     		mov	r3, r1
 296              		.loc 1 147 49
 297 00cc 2046     		mov	r0, r4
 298 00ce 2946     		mov	r1, r5
 299 00d0 FFF7FEFF 		bl	__aeabi_dmul
 300 00d4 0246     		mov	r2, r0
 301 00d6 0B46     		mov	r3, r1
 302              		.loc 1 147 10
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 9


 303 00d8 0549     		ldr	r1, .L16
 304 00da 0C68     		ldr	r4, [r1]
 305              		.loc 1 147 26
 306 00dc 1046     		mov	r0, r2
 307 00de 1946     		mov	r1, r3
 308 00e0 FFF7FEFF 		bl	__aeabi_d2uiz
 309 00e4 0346     		mov	r3, r0
 310 00e6 A363     		str	r3, [r4, #56]
 148:Core/Src/main.c ****     HAL_Delay(50);
 311              		.loc 1 148 5
 312 00e8 3220     		movs	r0, #50
 313 00ea FFF7FEFF 		bl	HAL_Delay
 133:Core/Src/main.c **** 
 314              		.loc 1 133 5
 315 00ee 9EE7     		b	.L13
 316              	.L17:
 317              		.align	2
 318              	.L16:
 319 00f0 00000000 		.word	htim4
 320 00f4 00000000 		.word	htim3
 321 00f8 00040240 		.word	1073873920
 322 00fc 00000000 		.word	duty_cycle
 323 0100 0000C842 		.word	1120403456
 324 0104 00005940 		.word	1079574528
 325              		.cfi_endproc
 326              	.LFE135:
 328              		.section	.text.SystemClock_Config,"ax",%progbits
 329              		.align	1
 330              		.global	SystemClock_Config
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 335              	SystemClock_Config:
 336              	.LFB136:
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c ****   /* USER CODE END 3 */
 151:Core/Src/main.c **** }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /**
 154:Core/Src/main.c ****   * @brief System Clock Configuration
 155:Core/Src/main.c ****   * @retval None
 156:Core/Src/main.c ****   */
 157:Core/Src/main.c **** void SystemClock_Config(void)
 158:Core/Src/main.c **** {
 337              		.loc 1 158 1
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 80
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341 0000 80B5     		push	{r7, lr}
 342              	.LCFI7:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 7, -8
 345              		.cfi_offset 14, -4
 346 0002 94B0     		sub	sp, sp, #80
 347              	.LCFI8:
 348              		.cfi_def_cfa_offset 88
 349 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 10


 350              	.LCFI9:
 351              		.cfi_def_cfa_register 7
 159:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 352              		.loc 1 159 22
 353 0006 07F12003 		add	r3, r7, #32
 354 000a 3022     		movs	r2, #48
 355 000c 0021     		movs	r1, #0
 356 000e 1846     		mov	r0, r3
 357 0010 FFF7FEFF 		bl	memset
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 358              		.loc 1 160 22
 359 0014 07F10C03 		add	r3, r7, #12
 360 0018 0022     		movs	r2, #0
 361 001a 1A60     		str	r2, [r3]
 362 001c 5A60     		str	r2, [r3, #4]
 363 001e 9A60     		str	r2, [r3, #8]
 364 0020 DA60     		str	r2, [r3, #12]
 365 0022 1A61     		str	r2, [r3, #16]
 366              	.LBB4:
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 163:Core/Src/main.c ****   */
 164:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 367              		.loc 1 164 3
 368 0024 0023     		movs	r3, #0
 369 0026 BB60     		str	r3, [r7, #8]
 370 0028 274B     		ldr	r3, .L22
 371 002a 1B6C     		ldr	r3, [r3, #64]
 372 002c 264A     		ldr	r2, .L22
 373 002e 43F08053 		orr	r3, r3, #268435456
 374 0032 1364     		str	r3, [r2, #64]
 375 0034 244B     		ldr	r3, .L22
 376 0036 1B6C     		ldr	r3, [r3, #64]
 377 0038 03F08053 		and	r3, r3, #268435456
 378 003c BB60     		str	r3, [r7, #8]
 379 003e BB68     		ldr	r3, [r7, #8]
 380              	.LBE4:
 381              	.LBB5:
 165:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 382              		.loc 1 165 3
 383 0040 0023     		movs	r3, #0
 384 0042 7B60     		str	r3, [r7, #4]
 385 0044 214B     		ldr	r3, .L22+4
 386 0046 1B68     		ldr	r3, [r3]
 387 0048 204A     		ldr	r2, .L22+4
 388 004a 43F44043 		orr	r3, r3, #49152
 389 004e 1360     		str	r3, [r2]
 390 0050 1E4B     		ldr	r3, .L22+4
 391 0052 1B68     		ldr	r3, [r3]
 392 0054 03F44043 		and	r3, r3, #49152
 393 0058 7B60     		str	r3, [r7, #4]
 394 005a 7B68     		ldr	r3, [r7, #4]
 395              	.LBE5:
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 168:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 169:Core/Src/main.c ****   */
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 11


 170:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 396              		.loc 1 170 36
 397 005c 0223     		movs	r3, #2
 398 005e 3B62     		str	r3, [r7, #32]
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 399              		.loc 1 171 30
 400 0060 0123     		movs	r3, #1
 401 0062 FB62     		str	r3, [r7, #44]
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 402              		.loc 1 172 41
 403 0064 1023     		movs	r3, #16
 404 0066 3B63     		str	r3, [r7, #48]
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 405              		.loc 1 173 34
 406 0068 0223     		movs	r3, #2
 407 006a BB63     		str	r3, [r7, #56]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 408              		.loc 1 174 35
 409 006c 0023     		movs	r3, #0
 410 006e FB63     		str	r3, [r7, #60]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 411              		.loc 1 175 30
 412 0070 1023     		movs	r3, #16
 413 0072 3B64     		str	r3, [r7, #64]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 414              		.loc 1 176 30
 415 0074 C023     		movs	r3, #192
 416 0076 7B64     		str	r3, [r7, #68]
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 417              		.loc 1 177 30
 418 0078 0223     		movs	r3, #2
 419 007a BB64     		str	r3, [r7, #72]
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 420              		.loc 1 178 30
 421 007c 0423     		movs	r3, #4
 422 007e FB64     		str	r3, [r7, #76]
 179:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 423              		.loc 1 179 7
 424 0080 07F12003 		add	r3, r7, #32
 425 0084 1846     		mov	r0, r3
 426 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 427 008a 0346     		mov	r3, r0
 428              		.loc 1 179 6
 429 008c 002B     		cmp	r3, #0
 430 008e 01D0     		beq	.L19
 180:Core/Src/main.c ****   {
 181:Core/Src/main.c ****     Error_Handler();
 431              		.loc 1 181 5
 432 0090 FFF7FEFF 		bl	Error_Handler
 433              	.L19:
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 185:Core/Src/main.c ****   */
 186:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 434              		.loc 1 186 31
 435 0094 0F23     		movs	r3, #15
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 12


 436 0096 FB60     		str	r3, [r7, #12]
 187:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 437              		.loc 1 188 34
 438 0098 0223     		movs	r3, #2
 439 009a 3B61     		str	r3, [r7, #16]
 189:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 440              		.loc 1 189 35
 441 009c 0023     		movs	r3, #0
 442 009e 7B61     		str	r3, [r7, #20]
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 443              		.loc 1 190 36
 444 00a0 4FF48053 		mov	r3, #4096
 445 00a4 BB61     		str	r3, [r7, #24]
 191:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 446              		.loc 1 191 36
 447 00a6 0023     		movs	r3, #0
 448 00a8 FB61     		str	r3, [r7, #28]
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 449              		.loc 1 193 7
 450 00aa 07F10C03 		add	r3, r7, #12
 451 00ae 0321     		movs	r1, #3
 452 00b0 1846     		mov	r0, r3
 453 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 454 00b6 0346     		mov	r3, r0
 455              		.loc 1 193 6
 456 00b8 002B     		cmp	r3, #0
 457 00ba 01D0     		beq	.L21
 194:Core/Src/main.c ****   {
 195:Core/Src/main.c ****     Error_Handler();
 458              		.loc 1 195 5
 459 00bc FFF7FEFF 		bl	Error_Handler
 460              	.L21:
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c **** }
 461              		.loc 1 197 1
 462 00c0 00BF     		nop
 463 00c2 5037     		adds	r7, r7, #80
 464              	.LCFI10:
 465              		.cfi_def_cfa_offset 8
 466 00c4 BD46     		mov	sp, r7
 467              	.LCFI11:
 468              		.cfi_def_cfa_register 13
 469              		@ sp needed
 470 00c6 80BD     		pop	{r7, pc}
 471              	.L23:
 472              		.align	2
 473              	.L22:
 474 00c8 00380240 		.word	1073887232
 475 00cc 00700040 		.word	1073770496
 476              		.cfi_endproc
 477              	.LFE136:
 479              		.section	.text.MX_TIM3_Init,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.thumb
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 13


 483              		.thumb_func
 485              	MX_TIM3_Init:
 486              	.LFB137:
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** /**
 200:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 201:Core/Src/main.c ****   * @param None
 202:Core/Src/main.c ****   * @retval None
 203:Core/Src/main.c ****   */
 204:Core/Src/main.c **** static void MX_TIM3_Init(void)
 205:Core/Src/main.c **** {
 487              		.loc 1 205 1
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 56
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491 0000 80B5     		push	{r7, lr}
 492              	.LCFI12:
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 496 0002 8EB0     		sub	sp, sp, #56
 497              	.LCFI13:
 498              		.cfi_def_cfa_offset 64
 499 0004 00AF     		add	r7, sp, #0
 500              	.LCFI14:
 501              		.cfi_def_cfa_register 7
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 502              		.loc 1 211 26
 503 0006 07F12803 		add	r3, r7, #40
 504 000a 0022     		movs	r2, #0
 505 000c 1A60     		str	r2, [r3]
 506 000e 5A60     		str	r2, [r3, #4]
 507 0010 9A60     		str	r2, [r3, #8]
 508 0012 DA60     		str	r2, [r3, #12]
 212:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 509              		.loc 1 212 27
 510 0014 07F12003 		add	r3, r7, #32
 511 0018 0022     		movs	r2, #0
 512 001a 1A60     		str	r2, [r3]
 513 001c 5A60     		str	r2, [r3, #4]
 213:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 514              		.loc 1 213 22
 515 001e 3B1D     		adds	r3, r7, #4
 516 0020 0022     		movs	r2, #0
 517 0022 1A60     		str	r2, [r3]
 518 0024 5A60     		str	r2, [r3, #4]
 519 0026 9A60     		str	r2, [r3, #8]
 520 0028 DA60     		str	r2, [r3, #12]
 521 002a 1A61     		str	r2, [r3, #16]
 522 002c 5A61     		str	r2, [r3, #20]
 523 002e 9A61     		str	r2, [r3, #24]
 214:Core/Src/main.c **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 14


 215:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 218:Core/Src/main.c ****   htim3.Instance = TIM3;
 524              		.loc 1 218 18
 525 0030 2B4B     		ldr	r3, .L31
 526 0032 2C4A     		ldr	r2, .L31+4
 527 0034 1A60     		str	r2, [r3]
 219:Core/Src/main.c ****   htim3.Init.Prescaler = 9600-1;
 528              		.loc 1 219 24
 529 0036 2A4B     		ldr	r3, .L31
 530 0038 42F27F52 		movw	r2, #9599
 531 003c 5A60     		str	r2, [r3, #4]
 220:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 532              		.loc 1 220 26
 533 003e 284B     		ldr	r3, .L31
 534 0040 0022     		movs	r2, #0
 535 0042 9A60     		str	r2, [r3, #8]
 221:Core/Src/main.c ****   htim3.Init.Period = 10;
 536              		.loc 1 221 21
 537 0044 264B     		ldr	r3, .L31
 538 0046 0A22     		movs	r2, #10
 539 0048 DA60     		str	r2, [r3, #12]
 222:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 540              		.loc 1 222 28
 541 004a 254B     		ldr	r3, .L31
 542 004c 0022     		movs	r2, #0
 543 004e 1A61     		str	r2, [r3, #16]
 223:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 544              		.loc 1 223 32
 545 0050 234B     		ldr	r3, .L31
 546 0052 0022     		movs	r2, #0
 547 0054 9A61     		str	r2, [r3, #24]
 224:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 548              		.loc 1 224 7
 549 0056 2248     		ldr	r0, .L31
 550 0058 FFF7FEFF 		bl	HAL_TIM_Base_Init
 551 005c 0346     		mov	r3, r0
 552              		.loc 1 224 6
 553 005e 002B     		cmp	r3, #0
 554 0060 01D0     		beq	.L25
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 555              		.loc 1 226 5
 556 0062 FFF7FEFF 		bl	Error_Handler
 557              	.L25:
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 558              		.loc 1 228 34
 559 0066 4FF48053 		mov	r3, #4096
 560 006a BB62     		str	r3, [r7, #40]
 229:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 561              		.loc 1 229 7
 562 006c 07F12803 		add	r3, r7, #40
 563 0070 1946     		mov	r1, r3
 564 0072 1B48     		ldr	r0, .L31
 565 0074 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 15


 566 0078 0346     		mov	r3, r0
 567              		.loc 1 229 6
 568 007a 002B     		cmp	r3, #0
 569 007c 01D0     		beq	.L26
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 570              		.loc 1 231 5
 571 007e FFF7FEFF 		bl	Error_Handler
 572              	.L26:
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 573              		.loc 1 233 7
 574 0082 1748     		ldr	r0, .L31
 575 0084 FFF7FEFF 		bl	HAL_TIM_OC_Init
 576 0088 0346     		mov	r3, r0
 577              		.loc 1 233 6
 578 008a 002B     		cmp	r3, #0
 579 008c 01D0     		beq	.L27
 234:Core/Src/main.c ****   {
 235:Core/Src/main.c ****     Error_Handler();
 580              		.loc 1 235 5
 581 008e FFF7FEFF 		bl	Error_Handler
 582              	.L27:
 236:Core/Src/main.c ****   }
 237:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 583              		.loc 1 237 37
 584 0092 0023     		movs	r3, #0
 585 0094 3B62     		str	r3, [r7, #32]
 238:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586              		.loc 1 238 33
 587 0096 0023     		movs	r3, #0
 588 0098 7B62     		str	r3, [r7, #36]
 239:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 589              		.loc 1 239 7
 590 009a 07F12003 		add	r3, r7, #32
 591 009e 1946     		mov	r1, r3
 592 00a0 0F48     		ldr	r0, .L31
 593 00a2 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 594 00a6 0346     		mov	r3, r0
 595              		.loc 1 239 6
 596 00a8 002B     		cmp	r3, #0
 597 00aa 01D0     		beq	.L28
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c ****     Error_Handler();
 598              		.loc 1 241 5
 599 00ac FFF7FEFF 		bl	Error_Handler
 600              	.L28:
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 601              		.loc 1 243 20
 602 00b0 0023     		movs	r3, #0
 603 00b2 7B60     		str	r3, [r7, #4]
 244:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 604              		.loc 1 244 19
 605 00b4 0023     		movs	r3, #0
 606 00b6 BB60     		str	r3, [r7, #8]
 245:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 16


 607              		.loc 1 245 24
 608 00b8 0023     		movs	r3, #0
 609 00ba FB60     		str	r3, [r7, #12]
 246:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 610              		.loc 1 246 24
 611 00bc 0023     		movs	r3, #0
 612 00be 7B61     		str	r3, [r7, #20]
 247:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 613              		.loc 1 247 7
 614 00c0 3B1D     		adds	r3, r7, #4
 615 00c2 0022     		movs	r2, #0
 616 00c4 1946     		mov	r1, r3
 617 00c6 0648     		ldr	r0, .L31
 618 00c8 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 619 00cc 0346     		mov	r3, r0
 620              		.loc 1 247 6
 621 00ce 002B     		cmp	r3, #0
 622 00d0 01D0     		beq	.L30
 248:Core/Src/main.c ****   {
 249:Core/Src/main.c ****     Error_Handler();
 623              		.loc 1 249 5
 624 00d2 FFF7FEFF 		bl	Error_Handler
 625              	.L30:
 250:Core/Src/main.c ****   }
 251:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** }
 626              		.loc 1 255 1
 627 00d6 00BF     		nop
 628 00d8 3837     		adds	r7, r7, #56
 629              	.LCFI15:
 630              		.cfi_def_cfa_offset 8
 631 00da BD46     		mov	sp, r7
 632              	.LCFI16:
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 00dc 80BD     		pop	{r7, pc}
 636              	.L32:
 637 00de 00BF     		.align	2
 638              	.L31:
 639 00e0 00000000 		.word	htim3
 640 00e4 00040040 		.word	1073742848
 641              		.cfi_endproc
 642              	.LFE137:
 644              		.section	.text.MX_TIM4_Init,"ax",%progbits
 645              		.align	1
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 650              	MX_TIM4_Init:
 651              	.LFB138:
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** /**
 258:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 259:Core/Src/main.c ****   * @param None
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 17


 260:Core/Src/main.c ****   * @retval None
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c **** static void MX_TIM4_Init(void)
 263:Core/Src/main.c **** {
 652              		.loc 1 263 1
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 56
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 80B5     		push	{r7, lr}
 657              	.LCFI17:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 8EB0     		sub	sp, sp, #56
 662              	.LCFI18:
 663              		.cfi_def_cfa_offset 64
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI19:
 666              		.cfi_def_cfa_register 7
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 667              		.loc 1 269 26
 668 0006 07F12803 		add	r3, r7, #40
 669 000a 0022     		movs	r2, #0
 670 000c 1A60     		str	r2, [r3]
 671 000e 5A60     		str	r2, [r3, #4]
 672 0010 9A60     		str	r2, [r3, #8]
 673 0012 DA60     		str	r2, [r3, #12]
 270:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 674              		.loc 1 270 27
 675 0014 07F12003 		add	r3, r7, #32
 676 0018 0022     		movs	r2, #0
 677 001a 1A60     		str	r2, [r3]
 678 001c 5A60     		str	r2, [r3, #4]
 271:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 679              		.loc 1 271 22
 680 001e 3B1D     		adds	r3, r7, #4
 681 0020 0022     		movs	r2, #0
 682 0022 1A60     		str	r2, [r3]
 683 0024 5A60     		str	r2, [r3, #4]
 684 0026 9A60     		str	r2, [r3, #8]
 685 0028 DA60     		str	r2, [r3, #12]
 686 002a 1A61     		str	r2, [r3, #16]
 687 002c 5A61     		str	r2, [r3, #20]
 688 002e 9A61     		str	r2, [r3, #24]
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 276:Core/Src/main.c ****   htim4.Instance = TIM4;
 689              		.loc 1 276 18
 690 0030 324B     		ldr	r3, .L40
 691 0032 334A     		ldr	r2, .L40+4
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 18


 692 0034 1A60     		str	r2, [r3]
 277:Core/Src/main.c ****   htim4.Init.Prescaler = 0;
 693              		.loc 1 277 24
 694 0036 314B     		ldr	r3, .L40
 695 0038 0022     		movs	r2, #0
 696 003a 5A60     		str	r2, [r3, #4]
 278:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 697              		.loc 1 278 26
 698 003c 2F4B     		ldr	r3, .L40
 699 003e 0022     		movs	r2, #0
 700 0040 9A60     		str	r2, [r3, #8]
 279:Core/Src/main.c ****   htim4.Init.Period = 5647-1;
 701              		.loc 1 279 21
 702 0042 2E4B     		ldr	r3, .L40
 703 0044 41F20E62 		movw	r2, #5646
 704 0048 DA60     		str	r2, [r3, #12]
 280:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 705              		.loc 1 280 28
 706 004a 2C4B     		ldr	r3, .L40
 707 004c 0022     		movs	r2, #0
 708 004e 1A61     		str	r2, [r3, #16]
 281:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 709              		.loc 1 281 32
 710 0050 2A4B     		ldr	r3, .L40
 711 0052 0022     		movs	r2, #0
 712 0054 9A61     		str	r2, [r3, #24]
 282:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 713              		.loc 1 282 7
 714 0056 2948     		ldr	r0, .L40
 715 0058 FFF7FEFF 		bl	HAL_TIM_Base_Init
 716 005c 0346     		mov	r3, r0
 717              		.loc 1 282 6
 718 005e 002B     		cmp	r3, #0
 719 0060 01D0     		beq	.L34
 283:Core/Src/main.c ****   {
 284:Core/Src/main.c ****     Error_Handler();
 720              		.loc 1 284 5
 721 0062 FFF7FEFF 		bl	Error_Handler
 722              	.L34:
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 723              		.loc 1 286 34
 724 0066 4FF48053 		mov	r3, #4096
 725 006a BB62     		str	r3, [r7, #40]
 287:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 726              		.loc 1 287 7
 727 006c 07F12803 		add	r3, r7, #40
 728 0070 1946     		mov	r1, r3
 729 0072 2248     		ldr	r0, .L40
 730 0074 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 731 0078 0346     		mov	r3, r0
 732              		.loc 1 287 6
 733 007a 002B     		cmp	r3, #0
 734 007c 01D0     		beq	.L35
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 735              		.loc 1 289 5
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 19


 736 007e FFF7FEFF 		bl	Error_Handler
 737              	.L35:
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 738              		.loc 1 291 7
 739 0082 1E48     		ldr	r0, .L40
 740 0084 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 741 0088 0346     		mov	r3, r0
 742              		.loc 1 291 6
 743 008a 002B     		cmp	r3, #0
 744 008c 01D0     		beq	.L36
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     Error_Handler();
 745              		.loc 1 293 5
 746 008e FFF7FEFF 		bl	Error_Handler
 747              	.L36:
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 748              		.loc 1 295 37
 749 0092 0023     		movs	r3, #0
 750 0094 3B62     		str	r3, [r7, #32]
 296:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 751              		.loc 1 296 33
 752 0096 0023     		movs	r3, #0
 753 0098 7B62     		str	r3, [r7, #36]
 297:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 754              		.loc 1 297 7
 755 009a 07F12003 		add	r3, r7, #32
 756 009e 1946     		mov	r1, r3
 757 00a0 1648     		ldr	r0, .L40
 758 00a2 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 759 00a6 0346     		mov	r3, r0
 760              		.loc 1 297 6
 761 00a8 002B     		cmp	r3, #0
 762 00aa 01D0     		beq	.L37
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     Error_Handler();
 763              		.loc 1 299 5
 764 00ac FFF7FEFF 		bl	Error_Handler
 765              	.L37:
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 766              		.loc 1 301 20
 767 00b0 6023     		movs	r3, #96
 768 00b2 7B60     		str	r3, [r7, #4]
 302:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 769              		.loc 1 302 19
 770 00b4 0023     		movs	r3, #0
 771 00b6 BB60     		str	r3, [r7, #8]
 303:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 772              		.loc 1 303 24
 773 00b8 0023     		movs	r3, #0
 774 00ba FB60     		str	r3, [r7, #12]
 304:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 775              		.loc 1 304 24
 776 00bc 0023     		movs	r3, #0
 777 00be 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 20


 305:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 778              		.loc 1 305 7
 779 00c0 3B1D     		adds	r3, r7, #4
 780 00c2 0022     		movs	r2, #0
 781 00c4 1946     		mov	r1, r3
 782 00c6 0D48     		ldr	r0, .L40
 783 00c8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 784 00cc 0346     		mov	r3, r0
 785              		.loc 1 305 6
 786 00ce 002B     		cmp	r3, #0
 787 00d0 01D0     		beq	.L38
 306:Core/Src/main.c ****   {
 307:Core/Src/main.c ****     Error_Handler();
 788              		.loc 1 307 5
 789 00d2 FFF7FEFF 		bl	Error_Handler
 790              	.L38:
 308:Core/Src/main.c ****   }
 309:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 791              		.loc 1 309 7
 792 00d6 3B1D     		adds	r3, r7, #4
 793 00d8 0422     		movs	r2, #4
 794 00da 1946     		mov	r1, r3
 795 00dc 0748     		ldr	r0, .L40
 796 00de FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 797 00e2 0346     		mov	r3, r0
 798              		.loc 1 309 6
 799 00e4 002B     		cmp	r3, #0
 800 00e6 01D0     		beq	.L39
 310:Core/Src/main.c ****   {
 311:Core/Src/main.c ****     Error_Handler();
 801              		.loc 1 311 5
 802 00e8 FFF7FEFF 		bl	Error_Handler
 803              	.L39:
 312:Core/Src/main.c ****   }
 313:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 316:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 804              		.loc 1 316 3
 805 00ec 0348     		ldr	r0, .L40
 806 00ee FFF7FEFF 		bl	HAL_TIM_MspPostInit
 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** }
 807              		.loc 1 318 1
 808 00f2 00BF     		nop
 809 00f4 3837     		adds	r7, r7, #56
 810              	.LCFI20:
 811              		.cfi_def_cfa_offset 8
 812 00f6 BD46     		mov	sp, r7
 813              	.LCFI21:
 814              		.cfi_def_cfa_register 13
 815              		@ sp needed
 816 00f8 80BD     		pop	{r7, pc}
 817              	.L41:
 818 00fa 00BF     		.align	2
 819              	.L40:
 820 00fc 00000000 		.word	htim4
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 21


 821 0100 00080040 		.word	1073743872
 822              		.cfi_endproc
 823              	.LFE138:
 825              		.section	.text.MX_GPIO_Init,"ax",%progbits
 826              		.align	1
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 831              	MX_GPIO_Init:
 832              	.LFB139:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /**
 321:Core/Src/main.c ****   * @brief GPIO Initialization Function
 322:Core/Src/main.c ****   * @param None
 323:Core/Src/main.c ****   * @retval None
 324:Core/Src/main.c ****   */
 325:Core/Src/main.c **** static void MX_GPIO_Init(void)
 326:Core/Src/main.c **** {
 833              		.loc 1 326 1
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 32
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837 0000 80B5     		push	{r7, lr}
 838              	.LCFI22:
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 7, -8
 841              		.cfi_offset 14, -4
 842 0002 88B0     		sub	sp, sp, #32
 843              	.LCFI23:
 844              		.cfi_def_cfa_offset 40
 845 0004 00AF     		add	r7, sp, #0
 846              	.LCFI24:
 847              		.cfi_def_cfa_register 7
 327:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 848              		.loc 1 327 20
 849 0006 07F10C03 		add	r3, r7, #12
 850 000a 0022     		movs	r2, #0
 851 000c 1A60     		str	r2, [r3]
 852 000e 5A60     		str	r2, [r3, #4]
 853 0010 9A60     		str	r2, [r3, #8]
 854 0012 DA60     		str	r2, [r3, #12]
 855 0014 1A61     		str	r2, [r3, #16]
 856              	.LBB6:
 328:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 333:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 857              		.loc 1 333 3
 858 0016 0023     		movs	r3, #0
 859 0018 BB60     		str	r3, [r7, #8]
 860 001a 274B     		ldr	r3, .L43
 861 001c 1B6B     		ldr	r3, [r3, #48]
 862 001e 264A     		ldr	r2, .L43
 863 0020 43F00403 		orr	r3, r3, #4
 864 0024 1363     		str	r3, [r2, #48]
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 22


 865 0026 244B     		ldr	r3, .L43
 866 0028 1B6B     		ldr	r3, [r3, #48]
 867 002a 03F00403 		and	r3, r3, #4
 868 002e BB60     		str	r3, [r7, #8]
 869 0030 BB68     		ldr	r3, [r7, #8]
 870              	.LBE6:
 871              	.LBB7:
 334:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 872              		.loc 1 334 3
 873 0032 0023     		movs	r3, #0
 874 0034 7B60     		str	r3, [r7, #4]
 875 0036 204B     		ldr	r3, .L43
 876 0038 1B6B     		ldr	r3, [r3, #48]
 877 003a 1F4A     		ldr	r2, .L43
 878 003c 43F00203 		orr	r3, r3, #2
 879 0040 1363     		str	r3, [r2, #48]
 880 0042 1D4B     		ldr	r3, .L43
 881 0044 1B6B     		ldr	r3, [r3, #48]
 882 0046 03F00203 		and	r3, r3, #2
 883 004a 7B60     		str	r3, [r7, #4]
 884 004c 7B68     		ldr	r3, [r7, #4]
 885              	.LBE7:
 886              	.LBB8:
 335:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 887              		.loc 1 335 3
 888 004e 0023     		movs	r3, #0
 889 0050 3B60     		str	r3, [r7]
 890 0052 194B     		ldr	r3, .L43
 891 0054 1B6B     		ldr	r3, [r3, #48]
 892 0056 184A     		ldr	r2, .L43
 893 0058 43F00103 		orr	r3, r3, #1
 894 005c 1363     		str	r3, [r2, #48]
 895 005e 164B     		ldr	r3, .L43
 896 0060 1B6B     		ldr	r3, [r3, #48]
 897 0062 03F00103 		and	r3, r3, #1
 898 0066 3B60     		str	r3, [r7]
 899 0068 3B68     		ldr	r3, [r7]
 900              	.LBE8:
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 338:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 901              		.loc 1 338 3
 902 006a 0022     		movs	r2, #0
 903 006c 4FF40051 		mov	r1, #8192
 904 0070 1248     		ldr	r0, .L43+4
 905 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 341:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 906              		.loc 1 341 23
 907 0076 4FF40053 		mov	r3, #8192
 908 007a FB60     		str	r3, [r7, #12]
 342:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 909              		.loc 1 342 24
 910 007c 0123     		movs	r3, #1
 911 007e 3B61     		str	r3, [r7, #16]
 343:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 23


 912              		.loc 1 343 24
 913 0080 0023     		movs	r3, #0
 914 0082 7B61     		str	r3, [r7, #20]
 344:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 915              		.loc 1 344 25
 916 0084 0023     		movs	r3, #0
 917 0086 BB61     		str	r3, [r7, #24]
 345:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 918              		.loc 1 345 3
 919 0088 07F10C03 		add	r3, r7, #12
 920 008c 1946     		mov	r1, r3
 921 008e 0B48     		ldr	r0, .L43+4
 922 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /*Configure GPIO pins : LOW_BUTTON_Pin HIGH_BUTTON_Pin */
 348:Core/Src/main.c ****   GPIO_InitStruct.Pin = LOW_BUTTON_Pin|HIGH_BUTTON_Pin;
 923              		.loc 1 348 23
 924 0094 4FF44043 		mov	r3, #49152
 925 0098 FB60     		str	r3, [r7, #12]
 349:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 926              		.loc 1 349 24
 927 009a 0023     		movs	r3, #0
 928 009c 3B61     		str	r3, [r7, #16]
 350:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 929              		.loc 1 350 24
 930 009e 0023     		movs	r3, #0
 931 00a0 7B61     		str	r3, [r7, #20]
 351:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 932              		.loc 1 351 3
 933 00a2 07F10C03 		add	r3, r7, #12
 934 00a6 1946     		mov	r1, r3
 935 00a8 0548     		ldr	r0, .L43+8
 936 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 356:Core/Src/main.c **** }
 937              		.loc 1 356 1
 938 00ae 00BF     		nop
 939 00b0 2037     		adds	r7, r7, #32
 940              	.LCFI25:
 941              		.cfi_def_cfa_offset 8
 942 00b2 BD46     		mov	sp, r7
 943              	.LCFI26:
 944              		.cfi_def_cfa_register 13
 945              		@ sp needed
 946 00b4 80BD     		pop	{r7, pc}
 947              	.L44:
 948 00b6 00BF     		.align	2
 949              	.L43:
 950 00b8 00380240 		.word	1073887232
 951 00bc 00080240 		.word	1073874944
 952 00c0 00040240 		.word	1073873920
 953              		.cfi_endproc
 954              	.LFE139:
 956              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 24


 957              		.align	1
 958              		.global	Error_Handler
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 963              	Error_Handler:
 964              	.LFB140:
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** /* USER CODE END 4 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** /**
 363:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** void Error_Handler(void)
 367:Core/Src/main.c **** {
 965              		.loc 1 367 1
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI27:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 00AF     		add	r7, sp, #0
 975              	.LCFI28:
 976              		.cfi_def_cfa_register 7
 977              	.LBB9:
 978              	.LBB10:
 979              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 25


  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 26


  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 27


 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 28


 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 29


 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 30


 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 31


 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 32


 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 33


 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 34


 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 35


 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 36


 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 37


 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 38


 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 39


 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 40


 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 41


 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 980              		.loc 2 962 3
 981              		.syntax unified
 982              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 983 0004 72B6     		cpsid i
 984              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 985              		.loc 2 963 1
 986              		.thumb
 987              		.syntax unified
 988 0006 00BF     		nop
 989              	.L46:
 990              	.LBE10:
 991              	.LBE9:
 368:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 369:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 370:Core/Src/main.c ****   __disable_irq();
 371:Core/Src/main.c ****   while (1)
 992              		.loc 1 371 9 discriminator 1
 993 0008 FEE7     		b	.L46
 994              		.cfi_endproc
 995              	.LFE140:
 997              		.text
 998              	.Letext0:
 999              		.file 3 "c:\\arm-gcc\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-ea
 1000              		.file 4 "c:\\arm-gcc\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-ea
 1001              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1002              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1003              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1004              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1005              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1006              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 42


 1007              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1008              		.file 12 "Core/Inc/main.h"
 1009              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1010              		.file 14 "Core/Inc/button.h"
 1011              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s 			page 43


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:24     .bss.htim3:00000000 htim3
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:21     .bss.htim3:00000000 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:31     .bss.htim4:00000000 htim4
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:28     .bss.htim4:00000000 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:38     .bss.time_count:00000000 time_count
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:35     .bss.time_count:00000000 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:45     .bss.duty_cycle:00000000 duty_cycle
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:42     .bss.duty_cycle:00000000 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:48     .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:54     .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:166    .text.HAL_TIM_PeriodElapsedCallback:0000008c $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:180    .text.main:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:186    .text.main:00000000 main
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:335    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:831    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:650    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:485    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:319    .text.main:000000f0 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:329    .text.SystemClock_Config:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:963    .text.Error_Handler:00000000 Error_Handler
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:474    .text.SystemClock_Config:000000c8 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:480    .text.MX_TIM3_Init:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:639    .text.MX_TIM3_Init:000000e0 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:645    .text.MX_TIM4_Init:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:820    .text.MX_TIM4_Init:000000fc $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:826    .text.MX_GPIO_Init:00000000 $t
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:950    .text.MX_GPIO_Init:000000b8 $d
C:\Users\mauro\AppData\Local\Temp\ccHUh1wN.s:957    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
__aeabi_ui2d
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Base_Start_IT
HAL_Delay
button_release
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_GPIO_WritePin
HAL_GPIO_Init
